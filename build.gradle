/*
 * Copyright 2016 DGraph Labs, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.0'
   	}
}

plugins {
    id "com.jfrog.bintray" version "1.7"
}
// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'com.google.protobuf'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'maven-publish'

group = 'io.dgraph'
version = '0.8.1'
sourceCompatibility = 1.8
targetCompatibility = 1.8

def grpcVersion = '1.2.0'
def dgraph4jVersion = "$version"

install {
    repositories.mavenInstaller {
        pom.project {
            name 'Dgraph4J'
            description 'Dgraph Java Client'
            url 'https://github.com/windoze/dgraph4j'
            inceptionYear '2017'

            packaging 'jar'
            groupId 'io.dgraph'
            artifactId 'dgraph4j'
            version "${dgraph4jVersion}"

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            scm {
                connection 'https://github.com/windoze/dgraph4j.git'
                url 'https://github.com/windoze/dgraph4j'

            }
            developers {
                developer {
                    name 'Dgraph Lab'
                }
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    configurations = ['archives']
    description = "Dgraph Java Client"
    pkg {
        repo = 'maven'
        name = 'dgraph4j'
        userOrg = user
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/windoze/dgraph4j.git'
        version {
            name = "${dgraph4jVersion}"
            desc = "Dgraph Java Client ${dgraph4jVersion}"
            vcsTag = "${dgraph4jVersion}"
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.4.1'
}


protobuf {
    protoc {
        // The version of protoc must match protobuf-java. If you don't depend on
        // protobuf-java directly, you will be transitively depending on the
        // protobuf-java version that grpc depends on.
        artifact = "com.google.protobuf:protoc:3.2.0"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }

    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
    generatedFilesBaseDir = "$projectDir/src/generated"
}

Credentials
// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile "org.slf4j:slf4j-api:1.7.21"
    compile "org.slf4j:slf4j-simple:1.7.21"
    compile "io.grpc:grpc-netty:${grpcVersion}"
	compile "io.grpc:grpc-protobuf:${grpcVersion}"
	compile "io.grpc:grpc-stub:${grpcVersion}"
	compile "org.apache.commons:commons-lang3:3.3.2"
    compile "org.projectlombok:lombok:1.16.18"
	compile group: 'mil.nga', name: 'wkb', version: '1.0.1'
	compile group: 'de.grundid.opendatalab', name: 'geojson-jackson', version: '1.0'
	
    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}

idea {
    module {
        sourceDirs += file("${projectDir}/src/generated/main/java");
        sourceDirs += file("${projectDir}/src/generated/main/grpc");
    }
}

test {
    testLogging.showStandardStreams = true
}

//create a single Jar with all dependencies
task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Dgraph Client for Java',
                   'Implementation-Version': version
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourceJar {
                classifier "sources"
            }
        }
    }
}
publishing {
    repositories {
        maven {
            url project.hasProperty('mavenUrl') ? project.property('mavenUrl') : System.getenv('MAVEN_URL')
            credentials(PasswordCredentials) {
                username project.hasProperty('mavenUser') ? project.property('mavenUser') : System.getenv('MAVEN_USER')
                password project.hasProperty('mavenPass') ? project.property('mavenPass') : System.getenv('MAVEN_PASS')
            }
        }
    }
}
